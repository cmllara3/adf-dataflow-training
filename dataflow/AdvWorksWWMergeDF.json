{
	"name": "AdvWorksWWMergeDF",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AdventureWorksProducts",
						"type": "DatasetReference"
					},
					"name": "AdvWorksDBSource"
				},
				{
					"dataset": {
						"referenceName": "WWImportersStockItems",
						"type": "DatasetReference"
					},
					"name": "WWImportersDBSource"
				},
				{
					"dataset": {
						"referenceName": "WWImportersStockItems",
						"type": "DatasetReference"
					},
					"name": "WWImportersColorSourceDBSource"
				},
				{
					"dataset": {
						"referenceName": "AdventureWorksProducts",
						"type": "DatasetReference"
					},
					"name": "AdvWorksCheckModel"
				},
				{
					"dataset": {
						"referenceName": "WWImportersStockItems",
						"type": "DatasetReference"
					},
					"name": "WWImportersGetInvoiceEvents"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "MergedDBProducts",
						"type": "DatasetReference"
					},
					"name": "MergeDBProductSink"
				},
				{
					"dataset": {
						"referenceName": "MergedDBClothes",
						"type": "DatasetReference"
					},
					"name": "MergeDBClothesSink"
				},
				{
					"dataset": {
						"referenceName": "AdvWorksBlobDS",
						"type": "DatasetReference"
					},
					"name": "AdvWorksBlobSink"
				}
			],
			"transformations": [
				{
					"name": "SortByName"
				},
				{
					"name": "FilterDiscontinued"
				},
				{
					"name": "DerivedFinalCostAndProductType"
				},
				{
					"name": "DerivedProductType"
				},
				{
					"name": "SelectADVWorksColumns"
				},
				{
					"name": "SelectWWImportersColumn"
				},
				{
					"name": "WWImportersColorLookUp"
				},
				{
					"name": "AdvWorksSplitClothesFromProducts"
				},
				{
					"name": "WWImportersSplitClothesFromProducts"
				},
				{
					"name": "CheckRepetedClothes"
				},
				{
					"name": "UnionAllClothes"
				},
				{
					"name": "UnionAllProducts"
				},
				{
					"name": "JoinModel"
				},
				{
					"name": "AggregateByProductModelName"
				},
				{
					"name": "RankByAveragePrice"
				},
				{
					"name": "AddPKClothes"
				},
				{
					"name": "AddPKProducts"
				},
				{
					"name": "AllowOnlyProductUpsert"
				},
				{
					"name": "DeriveProfitability"
				},
				{
					"name": "WindowClothes"
				},
				{
					"name": "ParseJSONColumn"
				},
				{
					"name": "FlattenEvents"
				},
				{
					"name": "ParseJSONEvents"
				},
				{
					"name": "PivotEventDates"
				},
				{
					"name": "DerivedColumnSubColumns"
				},
				{
					"name": "MapDriftedEvent",
					"description": "Creates an explicit mapping for each drifted column"
				},
				{
					"name": "UnpivotEventDate"
				},
				{
					"name": "SelectEventDelivery"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ProductID as integer,",
				"          Name as string,",
				"          ProductNumber as string,",
				"          MakeFlag as boolean,",
				"          FinishedGoodsFlag as boolean,",
				"          Color as string,",
				"          SafetyStockLevel as integer,",
				"          ReorderPoint as integer,",
				"          StandardCost as decimal(19,4),",
				"          ListPrice as decimal(19,4),",
				"          Size as string,",
				"          SizeUnitMeasureCode as string,",
				"          WeightUnitMeasureCode as string,",
				"          Weight as decimal(8,2),",
				"          DaysToManufacture as integer,",
				"          ProductLine as string,",
				"          Class as string,",
				"          Style as string,",
				"          ProductSubcategoryID as integer,",
				"          ProductModelID as integer,",
				"          SellStartDate as timestamp,",
				"          SellEndDate as timestamp,",
				"          DiscontinuedDate as timestamp,",
				"          rowguid as string,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> AdvWorksDBSource",
				"source(output(",
				"          StockItemID as integer,",
				"          StockItemName as string,",
				"          SupplierID as integer,",
				"          ColorID as integer,",
				"          UnitPackageID as integer,",
				"          OuterPackageID as integer,",
				"          Brand as string,",
				"          Size as string,",
				"          LeadTimeDays as integer,",
				"          QuantityPerOuter as integer,",
				"          IsChillerStock as boolean,",
				"          Barcode as string,",
				"          TaxRate as decimal(18,3),",
				"          UnitPrice as decimal(18,2),",
				"          RecommendedRetailPrice as decimal(18,2),",
				"          TypicalWeightPerUnit as decimal(18,3),",
				"          MarketingComments as string,",
				"          InternalComments as string,",
				"          Photo as binary,",
				"          CustomFields as string,",
				"          Tags as string,",
				"          SearchDetails as string,",
				"          LastEditedBy as integer,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     limit: 100,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> WWImportersDBSource",
				"source(output(",
				"          ColorId as integer,",
				"          Color as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT  ColorId, ColorName as Color\\nFROM    Warehouse.Colors',",
				"     format: 'query') ~> WWImportersColorSourceDBSource",
				"source(output(",
				"          ProductModelID as integer,",
				"          ProductModelName as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT  ProductModelID, Name as ProductModelName\\nFROM    Production.ProductModel',",
				"     format: 'query') ~> AdvWorksCheckModel",
				"source(output(",
				"          InvoiceID as integer,",
				"          ReturnedDeliveryData as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT  InvoiceID, ReturnedDeliveryData\\nFROM    Sales.Invoices',",
				"     format: 'query') ~> WWImportersGetInvoiceEvents",
				"WWImportersDBSource sort(asc(StockItemName, true),",
				"     caseInsensitive: true) ~> SortByName",
				"AdvWorksDBSource filter(isNull(SellEndDate)) ~> FilterDiscontinued",
				"SortByName derive(Cost = UnitPrice * (1 + (TaxRate/100)),",
				"          ItemType = case(\r",
				"    in(['S','M','L','3XL','4XL','5XL','6XL','7XL','XS','XXS','XL','XXL'], Size),\r",
				"    'Clothing', \r",
				"    'Product'\r",
				"    ),",
				"          each(match(type=='string'), $$ = trim($$))) ~> DerivedFinalCostAndProductType",
				"SelectADVWorksColumns derive(ItemType = case(\r",
				"    in(['S','M','L','XL'], Size),\r",
				"    'Clothing', \r",
				"    'Product'\r",
				"    )) ~> DerivedProductType",
				"JoinModel select(mapColumn(",
				"          Name,",
				"          Color,",
				"          Cost = StandardCost,",
				"          RetailPrice = ListPrice,",
				"          Size",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectADVWorksColumns",
				"WWImportersColorLookUp select(mapColumn(",
				"          Name = StockItemName,",
				"          Color,",
				"          Cost,",
				"          RetailPrice = RecommendedRetailPrice,",
				"          Size,",
				"          ItemType",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectWWImportersColumn",
				"DerivedFinalCostAndProductType, WWImportersColorSourceDBSource lookup(WWImportersDBSource@ColorID == WWImportersColorSourceDBSource@ColorId,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> WWImportersColorLookUp",
				"DerivedProductType split(ItemType == 'Product',",
				"     disjoint: false) ~> AdvWorksSplitClothesFromProducts@(AdvWorksProducts, AdvWorksClothes)",
				"SelectWWImportersColumn split(ItemType == 'Product',",
				"     disjoint: false) ~> WWImportersSplitClothesFromProducts@(WWImportersProducts, WWImportersClothes)",
				"AdvWorksSplitClothesFromProducts@AdvWorksClothes, WWImportersSplitClothesFromProducts@WWImportersClothes exists(AdvWorksSplitClothesFromProducts@AdvWorksClothes@Name == WWImportersSplitClothesFromProducts@WWImportersClothes@Name,",
				"     negate:true,",
				"     broadcast: 'auto')~> CheckRepetedClothes",
				"CheckRepetedClothes, WWImportersSplitClothesFromProducts@WWImportersClothes union(byName: true)~> UnionAllClothes",
				"WWImportersSplitClothesFromProducts@WWImportersProducts, AdvWorksSplitClothesFromProducts@AdvWorksProducts union(byName: true)~> UnionAllProducts",
				"FilterDiscontinued, AdvWorksCheckModel join(AdvWorksDBSource@ProductModelID == AdvWorksCheckModel@ProductModelID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinModel",
				"JoinModel aggregate(groupBy(ProductModelName),",
				"     AverageCost = avg(StandardCost)) ~> AggregateByProductModelName",
				"AggregateByProductModelName rank(desc(AverageCost, true),",
				"     output(Rank as long),",
				"     dense: true) ~> RankByAveragePrice",
				"WindowClothes keyGenerate(output(ClothingId as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> AddPKClothes",
				"UnionAllProducts keyGenerate(output(ProductID as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> AddPKProducts",
				"AddPKProducts alterRow(upsertIf(true())) ~> AllowOnlyProductUpsert",
				"UnionAllClothes derive(Profitability = iif(Cost == 0, toDecimal(0), RetailPrice/Cost)) ~> DeriveProfitability",
				"DeriveProfitability window(over(Size),",
				"     desc(Profitability, true),",
				"     Rank = denseRank()) ~> WindowClothes",
				"WWImportersGetInvoiceEvents parse(JsonData = ReturnedDeliveryData ? (ReceivedBy as string,",
				"          DeliveredWhen as date,",
				"          Events as string[]),",
				"     format: 'json',",
				"     documentForm: 'singleDocument') ~> ParseJSONColumn",
				"ParseJSONColumn foldDown(unroll(JsonData.Events),",
				"     mapColumn(",
				"          InvoiceID,",
				"          ReceivedBy = JsonData.ReceivedBy,",
				"          DeliveredWhen = JsonData.DeliveredWhen,",
				"          Events = JsonData.Events",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> FlattenEvents",
				"FlattenEvents parse(EventDetails = Events ? (Event as string,",
				"          EventTime as date,",
				"          ConNote as string),",
				"     format: 'json',",
				"     documentForm: 'singleDocument') ~> ParseJSONEvents",
				"DerivedColumnSubColumns pivot(groupBy(InvoiceID,",
				"          ReceivedBy,",
				"          DeliveredWhen,",
				"          ConNoteCode),",
				"     pivotBy(EventName),",
				"     {} = first(EventTime),",
				"     columnNaming: 'Item_$N$V_Date',",
				"     lateral: true) ~> PivotEventDates",
				"ParseJSONEvents derive(EventName = EventDetails.Event,",
				"          EventTime = EventDetails.EventTime,",
				"          ConNoteCode = EventDetails.ConNote) ~> DerivedColumnSubColumns",
				"PivotEventDates derive(DeliveryAttempt = toDate(byName('Item_DeliveryAttempt_Date')),",
				"          ReadyForCollection = toDate(byName('Item_Ready for collection_Date'))) ~> MapDriftedEvent",
				"MapDriftedEvent unpivot(output(",
				"          DeliveryEvent as string,",
				"          DeliveredWhen as date,",
				"          DeliveryAttempt as date,",
				"          ReadyForCollection as date",
				"     ),",
				"     ungroupBy(InvoiceID,",
				"          ReceivedBy,",
				"          ConNoteCode),",
				"     lateral: true,",
				"     ignoreNullPivots: false) ~> UnpivotEventDate",
				"UnpivotEventDate select(mapColumn(",
				"          InvoiceID,",
				"          ReceivedBy,",
				"          ConNoteCode,",
				"          DeliveryEvent,",
				"          DeliveredWhen",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectEventDelivery",
				"AllowOnlyProductUpsert sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     errorHandlingOption: 'stopOnFirstError') ~> MergeDBProductSink",
				"AddPKClothes sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     errorHandlingOption: 'stopOnFirstError') ~> MergeDBClothesSink",
				"RankByAveragePrice sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['RankProductModelByCost.csv'],",
				"     truncate: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> AdvWorksBlobSink"
			]
		}
	}
}